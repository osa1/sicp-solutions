## Ex 2.17

    
    (define (last-pair l)
        (if (null? (cdr l))
            l
            (last-pair (cdr l))))

## Ex 2.18

    
    (define (reverse l)
        (define (reverse-iter l r)
          (if (null? l)
              r
              (reverse-iter (cdr l) (cons (car l) r))))
        (reverse-iter l (list)))

## Ex 2.19

SICP gerçekten bazen garip oluyor, bu şeyi kaç kere yaptık lan?! (her seferinde de ben böyle şeyler söylüyorum ehehe)

    
    (define (except-first-denomination coin-values)
      (cdr coin-values))

    (define (first-denomination coin-values)
      (car coin-values))

    (define (no-more? coin-values)
      (null? coin-values))

Paraların sırası farketmez, zaten bu şekilde olabilecek tüm kombinasyonları hesaplıyoruz. Bu çözüm aslında biraz tüm kombinasyonları bulma problemininkine benziyor.



## Ex 2.20

    
    (define (same-parity . a)
        (define (add-while fun l r)
          (cond ((null? l) (reverse r))
                ((fun (car l)) (add-while fun (cdr l) (cons (car l) r)))
                (#t (add-while fun (cdr l) r))))
        (add-while (if (odd? (car a)) odd? even?) a (list)))

Clojure'daki `take-while` gibi bir fonksiyon yardımıyla çözdüm. `add-while` fonksiyonu, doğruluk testi için bir fonksiyon, bir liste, ve sonuçları ekleyeceği başka bir liste alıyor. `same-parity` ilk parametresi çift ise bu fonksiyone `even?`, tek ise `odd?` fonksiyonunu gönderiyor ve bu fonksiyonlarla test yapa yapa topluyor elemanları `add-while`.

## Ex 2.21

    
    (define (square-list items)
        (if (null? items)
            null
            (cons (* (car items) (car items)) (square-list (cdr items)))))

    (define (square-list items)
        (map (lambda (x) (* x x)) items))

## Ex 2.22

İlk koda bakalım:

    
    (define (square-list items)
        (define (iter things answer)
          (if (null? things)
              answer
              (iter (cdr things)
                    (cons (square (car things))
                          answer))))
        (iter items nil))

Her sefelerinde `things` listesinden ilk elemanı alıp, karesini hesaplayıp, `answer` listesine ekliyor(consluyor yani). `cons` işleminin listenin başına eklediğine dikkat. Yani her seferinde eklenen bir önceki cevap `answer` listesinde bir sonraki indexe kayıyor. Dolayısıyla sıra değişmiş oluyor(aslında birkaç alıştırma önce yazdığımız `reverse` fonksiyonunda da bunu kullandık zaten).

İkinci kod:

    
    (define (square-list items)
        (define (iter things answer)
          (if (null? things)
              answer
              (iter (cdr things)
                    (cons answer
                          (square (car things))))))
        (iter items nil))

Burda problem şu, `(square (car things))` kısmı bize her seferinde bir sayı dönüyor, bir liste değil. Dolayısıyla `cons` işlemi bir liste değil `pair` oluşturuyor. Bu şekilde cevabı her eklediğimizde iç içe ikililer oluşturmuş oluyoruz.

Soru da yapılmak istenileni şu ana kadar öğrendiklerimizle yapmanın tek yolu, ilk kod parçasında `answer` kısmını `(reverse answer)` yapmak.


## Ex 2.23

    
    (define (for-each fun l)
         (cond ((null? l) null)
               (#t (fun (car l))
                   (for-each fun (cdr l)))))

## Ex 2.24

Bunu yaptığıma inanamıyorum :P

    
    +-----+-----+
    |     |     |
    |  1  |  |  |
    |     |  |  |
    +-----+--|--+
             |
             V
          +-----+-----+     +-----+-----+    +-----+-----+
          |     |    /|     |     |     |    |     |    /|
          |  |  |  /  |     |  3  |   -----> |  4  |  /  |
          |  |  |/    |     |  ^  |     |    |     |/    |
          +--|--+-----+     +--|--+-----+    +-----+-----+
             |                 |
             V                 |
          +-----+-----+     +-----+-----+
          |     |     |     |     |    /|
          |  2  |   ------> |     |  /  |
          |     |     |     |     |/    |
          +-----+-----+     +-----+-----+



## Ex 2.25

    
    (car (cdr (car (cdr (cdr ...
    (car (car ...
    (cadr (cadr (cadr (cadr (cadr (cadr ...

## Ex 2.26

    
    > (append x y)
    (1 2 3 4 5 6)
    > (cons x y)
    ((1 2 3) 4 5 6)
    > (list x y)
    ((1 2 3) (4 5 6))

## Ex 2.27

    
    (define (deep-reverse l)
        (if (empty? l)
            null
            (append (list (reverse (car l))) (deep-reverse (cdr l)))))

## Ex 2.28

    
    (define (fringe l)
        (if (null? l)
            null
            (append (car l) (fringe (cdr l)))))

## Ex 2.29

a) Daha önce defalarca yaptığımızın aynısı, sadece `pair` yerine `list` kullandığımız için ikinci elemanı seçmek için `cdr` değil `cadr` (veya `(car (cdr))`) kullanmamız gerek.

    
    (define (make-mobile left right)
      (list left right))

    (define (make-branch length structure)
      (list length structure))

    (define (left-branch mobile)
      (car mobile))

    (define (right-branch mobile)
      (cadr mobile))

    (define (branch-length branch)
      (car branch))

    (define (branch-structure branch)
      (cadr branch))

b) Bu iş için bir yardımcı fonksiyon yazdım, branch ağırlığını hesaplayan:

    
    (define (total-weight-branch branch)
      (let ((structure (branch-structure branch)))
        (if (list? structure) ;; structure is another mobile
            (total-weight structure)
            structure)))

Daha sonra her mobile'ın(bunun anlamı ne yahu?) sağ ve sol branch'ının ağırlıklarını hesapladım:

    
    (define (total-weight mobile)
      (+ (total-weight-branch (left-branch mobile))
         (total-weight-branch (right-branch mobile))))


c) mobileın dengeli olması için, sol ve sağ kollarının torku eşit olmalı, ve eğer sağ ve sol kollarda başka mobilelar asılıysa, bunlar da kendi içlerinde dengede olmalı.

    
    (define (mobile-balanced? mobile)
      (let ((left (left-branch mobile))
            (right (right-branch mobile)))
        (and (= (* (branch-length left) (total-weight-branch left)) ;; sol kol torku
                (* (branch-length right) (total-weight-branch right))) ;; sag kol torku
             (if (list? (branch-structure left)) ;; sol kol mobile ise
                 (mobile-balanced? (branch-structure left)) ;; kendi icinde dengede olmali
                 #t)
             (if (list? (branch-structure right))
                 (mobile-balanced? (branch-structure right))
                 #t))))

Biraz kod tekrarı var, onlar da ayrı yardımcı fonksiyonlar yazılarak giderilebilir. Uğraşmak istemedim şu an için.

d) Yapıyı tutuş şeklimizi `list`den `pair`a çevirirsek, a şıkkında bahsettiğim gibi, ikinci elemanı (`branch-structure` ve `right-branch`) almak için `cadr` yerine `cdr` kullanmamız gerekir. Başka da birşey yapmaya gerek yok.


## Ex 2.30
Herhangi bir higher-order fonksiyon kullanmadan:


(define (square-tree tree)
  (cond ((null? tree) '())
        ((not (pair? tree)) (* tree tree))
        (else (cons (square-tree (car tree))
                    (square-tree (cdr tree))))))

Burda `pair?` fonksyionu biraz değişik çalışıyor. `list?` gibi, ama dotted pairlarda da `#t` dönüyor.

(pair? (cons 1 2))
#t
(list? (cons 1 2))
#f

Geriye kalan tüm durumlarda davranışı aynı `list?` gibi.

Bunun gibi yapıları gezerek yine benzer yapılar oluştururken ben hep `append`, `list` ve `cons` fonksiyonlarını karıştırıyordum. Farkları şöyle, 

`cons`: İki parametre alıyor, ikinci parametre bir `list` değilse, dotted pair, diğer türlü bir `list` oluşturuyor. İlk parametre yeni oluşturulan yapının ilk elemanı oluyor.
`append`: İstediğin kadar liste alıyor ve bunlar sırayla ucuca(uç uca? uçuca?) ekliyor. `(append (list 1 2) (list 3 4) (list 5 6)) == (list 1 2 3 4 5 6)`.

Şimdi bir de `map` kullanarak yapalım:

    
    (define (square-tree-map tree)
      (map (lambda (x)
             (if (not (pair? x)) (* x x)
                 (square-tree-map x))) tree))

`map`in güzelliği ortada. Listenin `car`ını işleme sokup, `cdr`ını yeniden fonksiyona yollama kısmını atlamış olduk. Listeyi artık `map` geziyor ve biz sadece o anki elemanla ilgileniyoruz. Bu sayede bir de liste bittimi anlamak için `(null? tree)` gibi bir kontrol yapmamıza gerek kalmıyor.

## Ex 2.31

    
    (define (tree-map f tree)
      (map (lambda (x)
             (if (not (pair? x)) (f x)
                 (tree-map f x))) tree))


## Ex 2.32

Bu soru epey zor, daha önceden de karşılaşmıştım(4Clojure'da vardı sanırım). Fikir şu, bir kümenün tüm alt kümeleri, kümedeki her eleman için, o elemanın dahil olduğu tüm alt kümeler + (yani birleşim) o elemanın dağil olmadığı tüm alt kümelerdir. Boş kümenin alt kümesi de yine kendisidir(base case).

    
    (define (subsets s)
      (if (null? s)
          (list null)
          (let ((rest (subsets (cdr s))))
            (append rest 
                    (map (lambda (x) (cons (car s) x)) rest)))))

En sondaki append fonksiyonuna dikkat ederseniz, `rest`, `s` listesinin ilk elemanı olmadan hesaplanan tüm alt kümeler. `map` ile hesaplamak istediğimiz şey de, ilk eleman olmadan hesaplanılan tüm alt kümelere ilk elemanın eklenmiş hali. Bu şekilde tüm alt kümeleri eklemiş oluruz.

Şu şekilde de fikir yürütülebilir: soruda `s` listesinin ilk elemanı hiç kullanılmıyor, `cdr` kısmı da yine aynı fonksiyone gönderiliyor, yani bir şekilde ilk elemanı değerlendirmeliyiz, yoksa bu fonksiyon hiçbir iş yapmamış olacak.

## Ex 2.33

    
    (define (map p sequence)
      (accumulate (lambda (x y) (cons (p x) y)) null sequence))

    (define (append seq1 seq2)
      (accumulate cons seq2 seq1))

    (define (length2 sequence)
      (accumulate (lambda (x y)
                    (+ 1 y)) 0 sequence))

## Ex 2.34

    
    (define (horner-eval x coefficient-sequence)
      (accumulate (lambda (this-coeff higher-terms)
                    (+ this-coeff (* x higher-terms))) 0 coefficient-sequence))

## Ex 2.35

    
    (define (count-leaves t)
      (accumulate + 0 (map (lambda (x)
                             (if (not (pair? x)) 1
                                 (count-leaves x))) t)))

## Ex 2.36

    
    (define (accumulate-n op init seqs)
      (if (null? (car seqs))
          null
          (cons (accumulate op init (map car seqs))
                (accumulate-n op init (map cdr seqs)))))

## Ex 2.37

    
    (define (matrix-*-vector m v)
      (map (lambda (row)
             (accumulate + 0 (map * row v))) m))

    (define (transpose mat)
      (accumulate-n cons '() mat))


Matris çarpımı için ben her satır ve her sütun için `dot-product` kullandım ama içimden bir ses `matrix-*-vector` fonksiyonu yardımıyla da yapılabilir diyor :) 

    
    (define (matrix-*-matrix m n)
      (let ((cols (transpose n)))
        (map (lambda (row)
               (map (lambda (col) (dot-product row col)) cols))
             m)))


## Ex 2.38

Sorudaki örnek girdiler için çıktıları bulmak kolay. `fold-left` ve `fold-right`ın aynı sonucu vermesi için operatorun birleşme özelliğini(associative property) sağlaması gerekir. Bunu görmek için şöyle düşünebiliriz, Lisp gösterimiyle değil de, matematikde kullandığımız gösterimle, `fold-left` sonucu şu şekilde hesaplıyor `(((op e1 e2) op e3) op e4)`, `fold-right` ise `(e1 op (e2 op (e3 op e4)))` şeklinde.


## Ex 2.39

    
    (define (reverse sequence)
      (fold-right (lambda (x y) (append y (list x))) null sequence))

    (define (reverse sequence)
      (fold-left (lambda (x y) (append (list y) x)) null sequence))


## Ex 2.40

    
    (define (unique-pairs n)
      (flatmap (lambda (x)
                 (map (lambda (y) (list y x))
                      (enumerate-interval 1 (- x 1))))
               (enumerate-interval 2 n)))

    (define (prime-sum-pairs n)
      (map make-pair-sum
           (filter prime-sum? (unique-pairs n))))

## Ex 2.41

    
    (define (ordered-triples n s)
      (flatmap (lambda (x)
                 (flatmap (lambda (y)
                            (filter (lambda (x) (not (null? x)))
                                    (map (lambda (z) (if (= (+ z y x) s)
                                                            (list z y x)
                                                            null))
                                         (enumerate-interval 1 (- y 1)))))
                          (enumerate-interval 2 (- x 1))))
               (enumerate-interval 3 n)))

Burdaki `filter` biraz garip oldu gibi, ama şu an için daha iyi bir çözüm gelmedi.


## Ex 2.42

TODO 8 queens

## Ex 2.43

TODO

## Ex 2.44

    
    (define (up-split painter n)
      (if (= n 0)
          painter
          (let ((smaller (up-split painter (- n 1))))
            (below painter (beside smaller smaller)))))

--------------

Bu bölümde kullanılan picture language'i Racket kullanıcıları şu şekilde edinebilirler:

    (require (planet "sicp.ss" ("soegaard" "sicp.plt" 2 1)))

Başka türlü de bu bölümü çözebilmenin bir yolu yok sanırım. SICP bazen böyle şakalar yaparak üzüyor bizi ;-(

---------------

## Ex 2.45

    
    (define (split p1 p2)
      (let ((fun (lambda (painter n)
                   (if (= n 0)
                       painter
                       (let ((smaller ((split p1 p2) painter (- n 1))))
                         (p1 painter (p2 smaller smaller)))))))
        fun))

Bu yöntem önceki halinden daha yavaş kalıyor, sanırım sebebi `smaller`ı hesaplarken her seferinde `(split p1 p2)` ile yeniden fonksiyon oluşturmamız. `lambda` ile recursive bir fonksiyon oluşturamıyoruz(en azından şu ana kadar öğrendiklerimizle).

## Ex 2.46

Pair halinde tutmayı tercih ettim:

    ::scale
    (define make-vect cons)
    (define xcor-vect car)
    (define ycor-vect cdr)

    (define (add-vect v1 v2)
      (make-vect (+ (xcor-vect v1) (xcor-vect v2))
                 (+ (ycor-vect v1) (ycor-vect v2))))

    (define (sub-vect v1 v2)
      (make-vect (- (xcor-vect v1) (xcor-vect v2))
                 (- (ycor-vect v1) (ycor-vect v2))))

    (define (scale-vect s v)
      (make-vect (* s (xcor-vect v)) (* s (ycor-vect v))))


## Ex 2.47

İlk implemantasyon için:

    
    (define origin-frame car)
    (define edge1-frame cadr)
    (define edge2-frame caddr)

İkincisi için sadece `edge2-frame` değişecek:

    
    (define edge2-frame cddr)


## Ex 2.48

Şaka gibi, bu sorunun aynısını o kadar çok yaptık ki..

    
    (define make-segment cons)
    (define start-segment car)
    (define end-segment cdr)


## Ex 2.49

    
    (define segments-outline 
      (list (make-segment (make-vect 0 0) (make-vect 0.99 0))
            (make-segment (make-vect 0 0) (make-vect 0 0.99))
            (make-segment (make-vect 0.99 0) (make-vect 0.99 0.99))
            (make-segment (make-vect 0 0.99) (make-vect 0.99 0.99))))

    (paint (segments->painter segments-outline))

    (define segments-x 
      (list (make-segment (make-vect 0 0) (make-vect 0.99 0.99))
            (make-segment (make-vect 0.99 0) (make-vect 0 0.99))))

    (paint (segments->painter segments-x))

    (define segments-diamond 
      (list (make-segment (make-vect 0.49 0) (make-vect 0.99 0.49))
            (make-segment (make-vect 0.99 0.49) (make-vect 0.50 0.99))
            (make-segment (make-vect 0.49 0.99) (make-vect 0 0.49))
            (make-segment (make-vect 0 0.49) (make-vect 0.49 0))))

    (paint (segments->painter segments-diamond))

Wave segmentinin de bunlardan pek farkı yok, sadece daha uzun, noktaları tespit etmek gerek, geçiyorum.

## Ex 2.50

NOT: 2.50 ve 2.51. soruları test edemedim, Racket'in picture language'ı SICP'deki gibi çalışmıyor, transform-painter fonksyionu 4 değil 3 parametre alıyor mesela(nasıl çalıştığını çözemedim).

Rotate fonksiyonlarını iki şekilde yazabiliriz, eğer 90 derecenin bir katını döndüreceksek `rotate90` fonksiyonunu kullanabiliriz. Diğer yöntem de yeni bir frame oluşturmak.

    
    (define (r180 painter)
      (rotate90 (rotate90 painter)))

    (define (r180 painter)
      (transform-painter painter
                         (make-vect 0.99 0.99)
                         (make-vect 0 0.99)
                         (make-vect 0.99 0)))

    (define (r270 painter)
      (rotate90 (rotate90 (rotate90 einstein))))

    (define (r270 painter)
      (transform-painter painter
                         (make-vect 0 0.99)
                         (make-vect 0 0)
                         (make-vect 0.99 0.99)))

    (define (flip-horiz painter)
      (transform-painter painter
                         (make-vect 0.99 0)
                         (make-vect 0 0)
                     (make-vect 0.99 0.99)))

## Ex 2.51

2.50. soruda bahsettiği msorundan dolayı bunları da test edemedim.

    
    (define (below painter1 painter2)
      (let ((split-point (make-vect 0.0 0.5)))
        (let ((paint-top
               (transform-painter painter1
                                  (make-vect 0 0)
                                  (make-vect 0.99 0)
                                  split-point))
              (paint-bottom
               (transform-painter painter2
                                  split-point
                                  (make-vect 0.99 0.5)
                                  (make-vect 0 0.99))))
          (lambda (frame)
            (paint-bottom frame)
            (paint-top frame)))))


İkinci yöntem çok tatlı, ilk önce iki painter'ı da 90 derece döndürüyorum, sonra yan yana yerleştiriyorum. Bu aşamada elde ettiğim şey, iki painter, üst üsteler, ama 90 derece dönük. 270 daha döndürerek düzeltiyorum.

    
    (define (below painter1 painter2)
      (rotate270 (beside (rotate90 painter2) (rotate90 painter1))))


## Ex 2.52

A şıkkı artık baydığından(ve yeterince kolay, wave'i nasıl yaptıysak aynı şekilde birkaç segment ekleyeceğiz), B şıkkını da ne yapmamı istediğini anlamadığımdan atlıyorum. 

C şıkkı için, Einstein'lar karenin dışına değil içine baksın:

    
    (define (square-limit2 painter n)
      (let ((combine4 (square-of-four identity flip-horiz
                                      flip-vert
                                      (lambda (x) (flip-horiz (flip-vert x))))))
        (combine4 (corner-split painter n))))
